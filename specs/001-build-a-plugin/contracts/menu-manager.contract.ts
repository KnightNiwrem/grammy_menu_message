/**
 * Menu Template Manager Contract
 *
 * This contract captures the developer-facing TypeScript surface required to fulfill
 * the functional requirements in the specification. It is runtime-agnostic and must
 * compile against both Deno and Node builds generated via deno2node.
 */

export interface MenuTemplateManager {
  /**
   * Registers a new menu template definition under the provided unique identifier.
   * @throws DuplicateTemplateError when `template.id` already exists.
   */
  registerTemplate(template: MenuTemplateDefinition): Promise<void>;

  /**
   * Produces a render-ready menu message bundle for the specified template id.
   * Ensures arguments and pagination state are persisted before returning.
   * @throws UnknownTemplateError when template id is unregistered.
   */
  createMenuMessage(
    templateId: string,
    request: MenuMessageRequest,
  ): Promise<MenuMessageEnvelope>;

  /**
   * Handles incoming callback query updates generated by menu button taps.
   * Must resolve the UUID payload, execute lifecycle hooks, persist history mutations,
   * and dispatch the resulting Telegram API edits.
   * @throws ExpiredActionError when UUID mapping or history has expired.
   */
  handleCallback(update: TelegramCallbackUpdate): Promise<void>;

  /**
   * Navigates back along the history stack for the given context key in a
   * deterministic, idempotent manner.
   * @throws HistoryUnavailableError when history is empty or expired.
   */
  navigateBack(update: TelegramCallbackUpdate): Promise<void>;

  /**
   * Exposes hooks for developer observability.
   */
  hooks: MenuLifecycleHooks;
}

export interface MenuTemplateDefinition {
  id: string;
  render(ctx: MenuRenderContext): Promise<MenuRenderResult>;
  onAction(
    payload: MenuActionPayload,
    ctx: MenuActionContext,
  ): Promise<MenuActionOutcome>;
  options?: MenuTemplateOptions;
}

export interface MenuMessageRequest {
  args?: MenuArguments;
  segmentationKey?: string;
  pagination?: Partial<PaginationState>;
  ttlOverride?: number;
}

export interface MenuMessageEnvelope {
  text: string;
  keyboard: InlineKeyboardSchema;
  metadata: MenuRenderMetadata;
  uuidBindings: MenuUuidBinding[];
}

export interface MenuUuidBinding {
  uuid: string;
  payload: MenuActionPayload;
}

export interface MenuRenderContext {
  segmentationKey: string;
  args: MenuArguments;
  history: Readonly<MenuHistoryStack>;
  pagination?: PaginationState;
}

export interface MenuRenderResult {
  text: string;
  keyboard: InlineKeyboardSchema;
  actions: MenuUuidBinding[];
  metadata: MenuRenderMetadata;
}

export interface PaginationState {
  currentPage: number;
  totalPages: number;
  pageSize?: number;
}

export interface MenuHistoryStack {
  entries: MenuHistoryEntry[];
  depthLimit: number;
  ttl: number | typeof Infinity;
}

export interface MenuHistoryEntry {
  templateId: string;
  args: MenuArguments;
  pagination?: PaginationState;
  renderedAt: Date;
  callbackUuids: string[];
}

export type MenuArguments = Record<string, unknown>;

export interface MenuLifecycleHooks {
  beforeRender: (event: BeforeRenderEvent) => Promise<void>;
  afterRender: (event: AfterRenderEvent) => Promise<void>;
  beforeNavigate: (event: BeforeNavigateEvent) => Promise<void>;
  afterNavigate: (event: AfterNavigateEvent) => Promise<void>;
  onError: (event: MenuErrorEvent) => Promise<void>;
}

export interface MenuActionPayload {
  kind: "navigate" | "paginate" | "custom" | "back" | "noop";
  targetTemplateId?: string;
  arguments?: MenuArguments;
  paginationCommand?: PaginationCommand;
}

export type PaginationCommand =
  | { kind: "next" }
  | { kind: "previous" }
  | { kind: "goto"; page: number };

export type MenuActionOutcome =
  | { status: "handled" }
  | { status: "ignored" }
  | { status: "expired"; reason: string };

// Telegram-specific types are placeholders until integrated with grammy typings.
export interface TelegramCallbackUpdate {
  callbackQuery: {
    id: string;
    from: {
      id: number;
    };
    message?: {
      message_id: number;
      chat: {
        id: number;
      };
    };
    data?: string;
  };
}

export type InlineKeyboardSchema = Array<Array<InlineKeyboardButton>>;

export interface InlineKeyboardButton {
  text: string;
  callback_data: string;
}

export interface MenuRenderMetadata {
  renderedAt: Date;
  expiryAt?: Date;
}

export interface MenuActionContext {
  update: TelegramCallbackUpdate;
  manager: MenuTemplateManager;
}

export interface MenuTemplateOptions {
  historyDepth?: number;
  historyTtl?: number;
  pagination?: PaginationConfig;
  hooks?: Partial<MenuLifecycleHooks>;
}

export interface PaginationConfig {
  maxPageSize?: number;
  minPageSize?: number;
}

export interface BeforeRenderEvent {
  templateId: string;
  segmentationKey: string;
  args: MenuArguments;
}

export interface AfterRenderEvent extends BeforeRenderEvent {
  result: MenuRenderResult;
}

export interface BeforeNavigateEvent {
  fromTemplateId: string;
  toTemplateId: string;
  segmentationKey: string;
  payload: MenuActionPayload;
}

export interface AfterNavigateEvent extends BeforeNavigateEvent {
  history: MenuHistoryStack;
}

export interface MenuErrorEvent {
  error: Error;
  segmentationKey: string;
  context: "render" | "navigate" | "callback" | "history";
}
